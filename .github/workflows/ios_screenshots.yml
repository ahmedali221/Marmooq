
name: iOS Screenshots

on:
  workflow_dispatch:
    inputs:
      initial_route:
        description: "Initial route to open (e.g., /products)"
        required: false
        default: "/products"

jobs:
  screenshots:
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter doctor
        run: flutter doctor -v | head -n 200

      - name: Fetch dependencies
        run: flutter pub get

      - name: Create .env
        run: |
          if [ ! -f .env ]; then
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.SHOPIFY_STOREFRONT_TOKEN }}" > .env
          fi

      - name: Build iOS for Simulator
        run: flutter build ios --simulator --no-codesign --dart-define=APP_INITIAL_ROUTE=${{ github.event.inputs.initial_route }}

      - name: Build Watch App
        shell: bash
        continue-on-error: true
        run: |
          cd ios
          echo "Attempting to build Watch app..."
          if xcodebuild -list -workspace Runner.xcworkspace | grep -q "Runner-watchos"; then
            xcodebuild clean -workspace Runner.xcworkspace -scheme Runner-watchos -sdk watchsimulator -configuration Debug
            xcodebuild build -workspace Runner.xcworkspace -scheme Runner-watchos -sdk watchsimulator -configuration Debug
            WATCH_APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.app" -path "*/watchsimulator/*" | grep -i watchkit | head -n1)
            if [ -n "$WATCH_APP_PATH" ]; then
              echo "Watch app built at: $WATCH_APP_PATH"
              echo "WATCH_APP_PATH=$WATCH_APP_PATH" >> $GITHUB_ENV
            else
              echo "Watch app not found, but continuing with iOS screenshots" >&2
            fi
          else
            echo "No WatchKit target found, but continuing with iOS screenshots" >&2
          fi
          cd ..

      - name: Boot Simulators
        shell: bash
        run: |
          set -euo pipefail
          echo "Xcode version:" && xcodebuild -version
          echo "Available runtimes:" && xcrun simctl list runtimes
          echo "Available device types:" && xcrun simctl list devicetypes

          # Select the latest iOS runtime
          IOS_RUNTIME=$(xcrun simctl list runtimes --json | jq -r '.runtimes[] | select(.isAvailable and (.name | type == "string" and startswith("iOS"))) | .identifier' | sort -V | tail -n1)
          if [ -z "$IOS_RUNTIME" ]; then
            echo "No available iOS runtime found" >&2
            exit 1
          fi
          echo "Using iOS runtime: $IOS_RUNTIME"

          # Select the latest watchOS runtime
          WATCH_RUNTIME=$(xcrun simctl list runtimes --json | jq -r '.runtimes[] | select(.isAvailable and (.name | type == "string" and startswith("watchOS"))) | .identifier' | sort -V | tail -n1)
          if [ -z "$WATCH_RUNTIME" ]; then
            echo "No available watchOS runtime found, but continuing with iOS screenshots" >&2
            WATCH_RUNTIME=""
          else
            echo "Using watchOS runtime: $WATCH_RUNTIME"
          fi

          # iPhone setup - 6.5" display
          IPHONE_NAME="iPhone 11 Pro Max"
          IPHONE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-11-Pro-Max"
          if ! xcrun simctl list devicetypes | grep -q "$IPHONE_NAME"; then
            echo "$IPHONE_NAME not available; falling back to iPhone XS Max"
            IPHONE_NAME="iPhone XS Max"
            IPHONE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-XS-Max"
          fi
          if ! xcrun simctl list devices | grep -q "$IPHONE_NAME ("; then
            echo "Creating $IPHONE_NAME"
            xcrun simctl create "$IPHONE_NAME" "$IPHONE_TYPE" "$IOS_RUNTIME"
          fi

          # iPad setup - 13" display
          IPAD_NAME="iPad Pro 13-inch (M4)"
          IPAD_TYPE="com.apple.CoreSimulator.SimDeviceType.iPad-Pro-13-inch-M4-8GB"
          if ! xcrun simctl list devicetypes | grep -q "iPad-Pro-13-inch-M4"; then
            echo "$IPAD_NAME not available; falling back to iPad Pro (12.9-inch) (6th generation)"
            IPAD_NAME="iPad Pro (12.9-inch) (6th generation)"
            IPAD_TYPE="com.apple.CoreSimulator.SimDeviceType.iPad-Pro-12-9-inch-6th-generation-8GB"
          fi
          if ! xcrun simctl list devices | grep -q "$IPAD_NAME ("; then
            echo "Creating $IPAD_NAME"
            xcrun simctl create "$IPAD_NAME" "$IPAD_TYPE" "$IOS_RUNTIME"
          fi

          # Boot iOS devices
          xcrun simctl boot "$IPHONE_NAME" || true
          xcrun simctl boot "$IPAD_NAME" || true
          open -a Simulator || true
          xcrun simctl bootstatus "$IPHONE_NAME" -b || true
          xcrun simctl bootstatus "$IPAD_NAME" -b || true
          sleep 10

          # Get iOS UDIDs
          IPHONE_UDID=$(xcrun simctl list devices --json | jq -r ".devices.\"$IOS_RUNTIME\"[] | select(.name==\"$IPHONE_NAME\") | .udid")
          IPAD_UDID=$(xcrun simctl list devices --json | jq -r ".devices.\"$IOS_RUNTIME\"[] | select(.name==\"$IPAD_NAME\") | .udid")
          echo "iPhone UDID: $IPHONE_UDID"
          echo "iPad UDID: $IPAD_UDID"
          echo "IPHONE_UDID=$IPHONE_UDID" >> $GITHUB_ENV
          echo "IPAD_UDID=$IPAD_UDID" >> $GITHUB_ENV

          # Watch devices (always attempt creation)
          WATCH_MODELS=(
            "Apple Watch Ultra 3 - 49mm:com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Ultra-3-49mm:410x502"
            "Apple Watch Series 11 - 46mm:com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Series-11-46mm:416x496"
            "Apple Watch Series 9 - 45mm:com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Series-9-45mm:396x484"
            "Apple Watch Series 6 - 44mm:com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Series-6-44mm:368x448"
            "Apple Watch Series 3 - 42mm:com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Series-3-42mm:312x390"
          )
          declare -A WATCH_UDIDS
          for model_entry in "${WATCH_MODELS[@]}"; do
            IFS=':' read -r model DEVICETYPE RESOLUTION <<< "$model_entry"
            if ! xcrun simctl list devices | grep -q "$model ("; then
              echo "Creating $model"
              xcrun simctl create "$model" "$DEVICETYPE" "$WATCH_RUNTIME" || {
                echo "Failed to create $model, skipping" >&2
                continue
              }
            fi
            xcrun simctl boot "$model" || true
            udid=$(xcrun simctl list devices --json | jq -r ".devices.\"$WATCH_RUNTIME\"[] | select(.name==\"$model\") | .udid")
            if [ -n "$udid" ]; then
              WATCH_UDIDS["$model"]="$udid"
              echo "Watch $model UDID: $udid (Resolution: $RESOLUTION)"
              echo "WATCH_${model// /_}_UDID=$udid" >> $GITHUB_ENV
            else
              echo "Failed to retrieve UDID for $model, skipping" >&2
            fi
          done

          echo "All devices booted"

      - name: Install app on iPhone
        shell: bash
        run: |
          IOS_APP_PATH=$(find build/ios/iphonesimulator -name "*.app" | head -n1)
          echo "Installing iOS app on iPhone: $IOS_APP_PATH"
          if [ -z "$IOS_APP_PATH" ]; then
            echo "No .app file found" >&2
            exit 1
          fi
          xcrun simctl uninstall "$IPHONE_UDID" com.marmooq.new || true
          xcrun simctl install "$IPHONE_UDID" "$IOS_APP_PATH"

      - name: Install app on iPad
        shell: bash
        run: |
          IOS_APP_PATH=$(find build/ios/iphonesimulator -name "*.app" | head -n1)
          echo "Installing iOS app on iPad: $IOS_APP_PATH"
          xcrun simctl uninstall "$IPAD_UDID" com.marmooq.new || true
          xcrun simctl install "$IPAD_UDID" "$IOS_APP_PATH"

      - name: Install Watch apps
        shell: bash
        continue-on-error: true
        run: |
          WATCH_BUNDLE_ID="com.marmooq.new.watchkitapp"
          WATCH_MODELS=(
            "Apple Watch Ultra 3 - 49mm"
            "Apple Watch Series 11 - 46mm"
            "Apple Watch Series 9 - 45mm"
            "Apple Watch Series 6 - 44mm"
            "Apple Watch Series 3 - 42mm"
          )
          for model in "${WATCH_MODELS[@]}"; do
            udid_var="WATCH_${model// /_}_UDID"
            udid=${!udid_var}
            if [ -n "$udid" ] && [ -n "${WATCH_APP_PATH:-}" ]; then
              echo "Installing Watch app on $model: $udid"
              xcrun simctl uninstall "$udid" "$WATCH_BUNDLE_ID" || true
              xcrun simctl install "$udid" "$WATCH_APP_PATH" || {
                echo "Failed to install Watch app on $model, continuing" >&2
                continue
              }
            else
              echo "Skipping installation for $model: no UDID or Watch app path" >&2
            fi
          done

      - name: Launch apps and take screenshots
        env:
          BUNDLE_ID: com.marmooq.new
          WATCH_BUNDLE_ID: com.marmooq.new.watchkitapp
        shell: bash
        run: |
          mkdir -p screenshots
          PAGES=("${{ github.event.inputs.initial_route }}" "/login" "/register" "/profile" "/cart")
          PAGE_NAMES=("products" "login" "register" "profile" "cart")
          
          echo "Capturing screenshots for pages: ${PAGES[*]}"

          # Set clean status bars for iOS devices
          xcrun simctl status_bar "$IPHONE_UDID" override --time "9:41" --batteryState charged --batteryLevel 100 --wifiBars 3 --cellularMode active || true
          xcrun simctl status_bar "$IPAD_UDID" override --time "9:41" --batteryState charged --batteryLevel 100 --wifiBars 3 || true

          # Launch iOS apps and take screenshots for each page
          for i in {0..4}; do
            page="${PAGES[$i]}"
            page_name="${PAGE_NAMES[$i]}"
            echo "Launching iOS apps with route $page"
            xcrun simctl launch "$IPHONE_UDID" $BUNDLE_ID --args --dart-define=APP_INITIAL_ROUTE="$page" || true
            xcrun simctl launch "$IPAD_UDID" $BUNDLE_ID --args --dart-define=APP_INITIAL_ROUTE="$page" || true
            sleep 5
            xcrun simctl io "$IPHONE_UDID" screenshot "./screenshots/iphone_65_${page_name}.png" || {
              echo "Failed to capture iPhone screenshot for $page_name, continuing" >&2
            }
            xcrun simctl io "$IPAD_UDID" screenshot "./screenshots/ipad_13_${page_name}.png" || {
              echo "Failed to capture iPad screenshot for $page_name, continuing" >&2
            }
          done

          # Launch Watch apps and take screenshots
          WATCH_MODELS=(
            "Apple Watch Ultra 3 - 49mm"
            "Apple Watch Series 11 - 46mm"
            "Apple Watch Series 9 - 45mm"
            "Apple Watch Series 6 - 44mm"
            "Apple Watch Series 3 - 42mm"
          )
          for model in "${WATCH_MODELS[@]}"; do
            udid_var="WATCH_${model// /_}_UDID"
            udid=${!udid_var}
            if [ -n "$udid" ]; then
              model_slug=$(echo "$model" | tr ' ()' '---' | tr -d '[:space:]')
              for i in {0..4}; do
                page="${PAGES[$i]}"
                page_name="${PAGE_NAMES[$i]}"
                echo "Launching Watch app on $model with route $page"
                xcrun simctl launch "$udid" $WATCH_BUNDLE_ID --args --dart-define=APP_INITIAL_ROUTE="$page" || {
                  echo "Failed to launch Watch app on $model for $page, continuing" >&2
                  continue
                }
                sleep 5
                xcrun simctl io "$udid" screenshot "./screenshots/watch_${model_slug}_${page_name}.png" || {
                  echo "Failed to capture Watch screenshot for $model, $page_name, continuing" >&2
                }
              done
            else
              echo "Skipping screenshots for $model: no UDID available" >&2
            fi
          done

      - name: Upload screenshots artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-screenshots
          path: screenshots

      - name: Clear status bars
        run: |
          xcrun simctl status_bar "$IPHONE_UDID" clear || true
          xcrun simctl status_bar "$IPAD_UDID" clear || true
