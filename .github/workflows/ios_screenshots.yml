name: iOS Screenshots

on:
  workflow_dispatch:
    inputs:
      initial_route:
        description: "Initial route to open (e.g., /register)"
        required: false
        default: "/register"

jobs:
  screenshots:
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter doctor
        run: flutter doctor -v | sed -n '1,200p'

      - name: Fetch dependencies
        run: flutter pub get

      - name: Create .env
        run: |
          if [ ! -f .env ]; then
            echo "SHOPIFY_STOREFRONT_TOKEN=${SHOPIFY_STOREFRONT_TOKEN:-REPLACE_ME}" > .env
          fi

      - name: Build iOS for Simulator
        run: flutter build ios --simulator --no-codesign --dart-define=APP_INITIAL_ROUTE=${{ github.event.inputs.initial_route }}

      - name: Boot Simulators
        shell: bash
        run: |
          set -euo pipefail
          echo "Xcode version:" && xcodebuild -version
          echo "Available runtimes:" && xcrun simctl list runtimes
          echo "Available device types:" && xcrun simctl list devicetypes

          # Pick latest available iOS runtime
          # Extract an iOS runtime identifier like com.apple.CoreSimulator.SimRuntime.iOS-17-5
          RUNTIME=$(xcrun simctl list runtimes | sed -n 's/.*- \(com\.apple\.CoreSimulator\.SimRuntime\.iOS-[0-9-]*\) (Available).*/\1/p' | tail -n1)
          if [ -z "$RUNTIME" ]; then
            RUNTIME=$(xcrun simctl list runtimes | sed -n 's/.*- \(com\.apple\.CoreSimulator\.SimRuntime\.iOS-[0-9-]*\) (available).*/\1/p' | tail -n1)
          fi
          echo "Using runtime identifier: ${RUNTIME:-<none>}"
          if [ -z "${RUNTIME:-}" ]; then
            echo "No available iOS runtime found" >&2
            xcrun simctl list runtimes
            exit 1
          fi

          # Ensure target devices exist; create if missing
          IPHONE_NAME="iPhone 11 Pro Max"
          IPAD_NAME="iPad Pro (12.9-inch) (6th generation)"

          if ! xcrun simctl list devices | grep -q "$IPHONE_NAME ("; then
            echo "Creating $IPHONE_NAME"
            if xcrun simctl list devicetypes | grep -q "$IPHONE_NAME"; then
              xcrun simctl create "$IPHONE_NAME" "$IPHONE_NAME" "$RUNTIME"
            else
              echo "$IPHONE_NAME not available; falling back to iPhone 14 Pro Max (6.7-inch)"
              IPHONE_NAME="iPhone 14 Pro Max"
              xcrun simctl create "$IPHONE_NAME" "$IPHONE_NAME" "$RUNTIME"
            fi
          fi

          if ! xcrun simctl list devices | grep -q "$IPAD_NAME ("; then
            echo "Creating $IPAD_NAME"
            if xcrun simctl list devicetypes | grep -q "$IPAD_NAME"; then
              xcrun simctl create "$IPAD_NAME" "$IPAD_NAME" "$RUNTIME"
            else
              echo "$IPAD_NAME not available; falling back to iPad Pro (12.9-inch) (5th generation)"
              IPAD_NAME="iPad Pro (12.9-inch) (5th generation)"
              xcrun simctl create "$IPAD_NAME" "$IPAD_NAME" "$RUNTIME"
            fi
          fi

          xcrun simctl boot "$IPHONE_NAME" || true
          xcrun simctl boot "$IPAD_NAME" || true
          open -a Simulator || true
          # Wait until boot completes
          xcrun simctl bootstatus "$IPHONE_NAME" -b || true
          xcrun simctl bootstatus "$IPAD_NAME" -b || true
          sleep 5

          echo "Devices listing:"
          xcrun simctl list devices

          # Export UDIDs for later steps
          export IPHONE_UDID=$(xcrun simctl list devices | awk -v name="$IPHONE_NAME" -F'[()]' '$0 ~ name" (" {print $2; exit}')
          export IPAD_UDID=$(xcrun simctl list devices | awk -v name="$IPAD_NAME" -F'[()]' '$0 ~ name" (" {print $2; exit}')
          echo "Resolved iPhone UDID: $IPHONE_UDID"
          echo "Resolved iPad UDID: $IPAD_UDID"
          echo "IPHONE_UDID=$IPHONE_UDID" >> $GITHUB_ENV
          echo "IPAD_UDID=$IPAD_UDID" >> $GITHUB_ENV

      - name: Install app on iPhone
        shell: bash
        run: |
          IOS_APP_PATH=$(ls build/ios/iphonesimulator/*.app | head -n1)
          echo "Installing app: $IOS_APP_PATH"
          # Match name from previous step
          IPHONE_NAME="iPhone 11 Pro Max"
          if ! xcrun simctl list devices | grep -q "$IPHONE_NAME ("; then IPHONE_NAME="iPhone 14 Pro Max"; fi
          TARGET=${IPHONE_UDID:-$IPHONE_NAME}
          xcrun simctl uninstall "$TARGET" com.marmooq.new || true
          xcrun simctl install "$TARGET" "$IOS_APP_PATH"

      - name: Install app on iPad Pro 12.9
        shell: bash
        run: |
          IOS_APP_PATH=$(ls build/ios/iphonesimulator/*.app | head -n1)
          echo "Installing app: $IOS_APP_PATH"
          IPAD_NAME="iPad Pro (12.9-inch) (6th generation)"
          if ! xcrun simctl list devices | grep -q "$IPAD_NAME ("; then IPAD_NAME="iPad Pro (12.9-inch) (5th generation)"; fi
          TARGET=${IPAD_UDID:-$IPAD_NAME}
          xcrun simctl uninstall "$TARGET" com.marmooq.new || true
          xcrun simctl install "$TARGET" "$IOS_APP_PATH"

      - name: Launch app and set clean status bars
        env:
          BUNDLE_ID: com.marmooq.new
        shell: bash
        run: |
          IPHONE_NAME="iPhone 11 Pro Max"; xcrun simctl list devices | grep -q "$IPHONE_NAME (" || IPHONE_NAME="iPhone 14 Pro Max"
          IPAD_NAME="iPad Pro (12.9-inch) (6th generation)"; xcrun simctl list devices | grep -q "$IPAD_NAME (" || IPAD_NAME="iPad Pro (12.9-inch) (5th generation)"
          IPHONE_TARGET=${IPHONE_UDID:-$IPHONE_NAME}
          IPAD_TARGET=${IPAD_UDID:-$IPAD_NAME}
          xcrun simctl status_bar "$IPHONE_TARGET" override --time 9:41 --batteryState charged --batteryLevel 100 --wifiBars 3 --cellularMode active || true
          xcrun simctl status_bar "$IPAD_TARGET" override --time 9:41 --batteryState charged --batteryLevel 100 --wifiBars 3 || true
          xcrun simctl launch "$IPHONE_TARGET" $BUNDLE_ID || true
          xcrun simctl launch "$IPAD_TARGET" $BUNDLE_ID || true
          sleep 5

      - name: Take screenshots
        shell: bash
        run: |
          mkdir -p screenshots
          IPHONE_TARGET=${IPHONE_UDID:-"iPhone 11 Pro Max"}
          xcrun simctl list devices | grep -q "$IPHONE_TARGET" || IPHONE_TARGET="iPhone 14 Pro Max"
          IPAD_TARGET=${IPAD_UDID:-"iPad Pro (12.9-inch) (6th generation)"}
          xcrun simctl list devices | grep -q "$IPAD_TARGET" || IPAD_TARGET="iPad Pro (12.9-inch) (5th generation)"
          xcrun simctl io "$IPHONE_TARGET" screenshot ./screenshots/iphone_65_01.png
          xcrun simctl io "$IPAD_TARGET" screenshot ./screenshots/ipad_129_01.png

      - name: Upload screenshots artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-screenshots
          path: screenshots

      - name: Clear status bars
        run: |
          xcrun simctl status_bar "iPhone 11 Pro Max" clear || true
          xcrun simctl status_bar "iPad Pro (12.9-inch) (6th generation)" clear || true


